# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Igor Támara <igor@tamarapatino.org>, 2012.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-03-26 23:32-0500\n"
"PO-Revision-Date: 2012-08-07 19:10-0500\n"
"Last-Translator: Igor Támara <igor@tamarapatino.org>\n"
"Language-Team: slec's translation team\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Virtaal 0.7.1\n"

#. type: Plain text
#: orig/tutorial04.txt:1
#, no-wrap
msgid "=====================================\n"
msgstr "=====================================\n"

#. type: Plain text
#: orig/tutorial04.txt:3
#, no-wrap
msgid ""
"Writing your first Django app, part 4\n"
"=====================================\n"
msgstr ""
"Su primera aplicación en Django, parte 4\n"
"========================================\n"

#. type: Plain text
#: orig/tutorial04.txt:8
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""
"Este tutorial comienza en el punto en el que terminó el :doc:`Tutorial 3 "
"</intro/tutorial03>`. Continuamos nuestra aplicación de votaciones y nos "
"enfocaremos en procesar formularios y aligerar nuestro código."

#. type: Plain text
#: orig/tutorial04.txt:10
#, no-wrap
msgid ""
"Write a simple form\n"
"===================\n"
msgstr ""
"Crear un formulario sencillo\n"
"============================\n"

#. type: Plain text
#: orig/tutorial04.txt:14
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"Actualicemos nuestra plantilla detalle (\"polls/detail.html\") del tutorial "
"anterior, para que contenga un elemento HTML ``<form>``:"

#. type: Plain text
#: orig/tutorial04.txt:16 orig/tutorial04.txt:166
msgid ".. code-block:: html+django"
msgstr ".. code-block:: html+django"

#. type: Plain text
#: orig/tutorial04.txt:18 orig/tutorial04.txt:168
#, no-wrap
msgid "    <h1>{{ poll.question }}</h1>\n"
msgstr "    <h1>{{ poll.question }}</h1>\n"

#. type: Plain text
#: orig/tutorial04.txt:20
#, no-wrap
msgid "    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n"
msgstr "    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% "
"endif %}\n"

#. type: Plain text
#: orig/tutorial04.txt:29
#, no-wrap
msgid ""
"    <form action=\"/polls/{{ poll.id }}/vote/\" method=\"post\">\n"
"    {% csrf_token %}\n"
"    {% for choice in poll.choice_set.all %}\n"
"        <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\" />\n"
"        <label for=\"choice{{ forloop.counter }}\">{{ choice.choice }}</label><br />\n"
"    {% endfor %}\n"
"    <input type=\"submit\" value=\"Vote\" />\n"
"    </form>\n"
msgstr ""
"    <form action=\"/polls/{{ poll.id }}/vote/\" method=\"post\">\n"
"    {% csrf_token %}\n"
"    {% for choice in poll.choice_set.all %}\n"
"        <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" "
"value=\"{{ choice.id }}\" />\n"
"        <label for=\"choice{{ forloop.counter }}\">{{ choice.choice "
"}}</label><br />\n"
"    {% endfor %}\n"
"    <input type=\"submit\" value=\"Vote\" />\n"
"    </form>\n"

#. type: Plain text
#: orig/tutorial04.txt:31
msgid "A quick rundown:"
msgstr "una explicación rápida:"

#. type: Bullet: '* '
#: orig/tutorial04.txt:37
msgid ""
"The above template displays a radio button for each poll choice. The "
"``value`` of each radio button is the associated poll choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=3``. This is HTML Forms 101."
msgstr ""
"La plantilla anterior muestra un botón de radio para cada elección de la "
"encuesta. El ``valor`` de cada botón de radio está asociado al ID de una "
"opción. El ``ǹombre`` de cada botón de radio es ``\"choice\"``. Esto significa "
"que cuando alguien selecciona uno de los botones de radio y envía el "
"formulario, enviará el dato POST ``choice=3``.  Esto es formularios HTML "
"101."

#. type: Bullet: '* '
#: orig/tutorial04.txt:44
msgid ""
"We set the form's ``action`` to ``/polls/{{ poll.id }}/vote/``, and we set "
"``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method=\"get"
"\"``) is very important, because the act of submitting this form will alter "
"data server-side. Whenever you create a form that alters data server-side, "
"use ``method=\"post\"``. This tip isn't specific to Django; it's just good "
"Web development practice."
msgstr ""
"Establecemos el ``action`` del formulario a ``/polls{{ poll.id }}/vote/``, y "
"establecemos ``method=\"post\"``.  Usar ``method=\"post\"`` (en lugar de "
"``method=\"get\"``) es muy importante, porque el acto de enviar este "
"formulario modificará los datos en el lado del servidor. Cada vez que cree "
"un formulario que altere los datos en el lado del servidor, use "
"``method=\"post\"``. Este consejo no es específico para Django; es solamente "
"una buena práctica de desarrollo web."

#. type: Bullet: '* '
#: orig/tutorial04.txt:47
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""
"``forloop.counter`` indica cuántas veces la etiqueta :ttag:`for` ha pasado "
"por el bucle"

#. type: Bullet: '* '
#: orig/tutorial04.txt:54
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries.  Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""
"Dado que estamos creando un formulario POST (que puede tener el efecto de "
"modificar datos), necesitamos tener en cuenta las falsificaciones de "
"terceros(CSRF). Afortunadamente no tiene que preocuparse demasiado, porque "
"Django viene con un sistema muy sencillo para protgerse de las mismas. "
"Resumiendo, todos los formularios POST que tengan como desinto URLs internas "
"deberían usar la etiqueta de plantilla :ttag:`{% csrf_token %"
"}<csrf_token>`."

#. type: Plain text
#: orig/tutorial04.txt:59
msgid ""
"The :ttag:`{% csrf_token %}<csrf_token>` tag requires information from the "
"request object, which is not normally accessible from within the template "
"context. To fix this, a small adjustment needs to be made to the ``detail`` "
"view, so that it looks like the following::"
msgstr ""
"La etiqueta :ttag:`{% csrf_token %}<csrf_token>` requiere información del "
"objeto solicitud, al cual no se puede acceder normalmente desde el contexto "
"de la plantilla. Para arreglarlo, basta un pequeño ajuste a la vista "
"``detalle``, para que luzca de la siguiente forma::"

#. type: Plain text
#: orig/tutorial04.txt:66
#, no-wrap
msgid ""
"    from django.template import RequestContext\n"
"    # ...\n"
"    def detail(request, poll_id):\n"
"        p = get_object_or_404(Poll, pk=poll_id)\n"
"        return render_to_response('polls/detail.html', {'poll': p},\n"
"                                   context_instance=RequestContext(request))\n"
msgstr ""
"    from django.template import RequestContext\n"
"    # ...\n"
"    def detail(request, poll_id):\n"
"        p = get_object_or_404(Poll, pk=poll_id)\n"
"        return render_to_response('polls/detail.html', {'poll': p},\n"
"                                  context_instance=RequestContext(request))\n"

#. type: Plain text
#: orig/tutorial04.txt:69
msgid ""
"The details of how this works are explained in the documentation for :ref:"
"`RequestContext <subclassing-context-requestcontext>`."
msgstr ""
"Los detalles de cómo funciona esto se explican en la documentación "
":ref:`RequestContext <subclassing-context-requestcontext>`."

#. type: Plain text
#: orig/tutorial04.txt:73
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line::"
msgstr ""
"Ahora creemos la vista de Django que se encarga de los datos enviados y hace "
"algo con estos.  Recuerde que en el :doc:`Tutorial 3 </intro/tutorial03>` "
"creamos un URLconf para la aplicación de encuestas que incluía esta línea::"

#. type: Plain text
#: orig/tutorial04.txt:75
#, no-wrap
msgid "    (r'^(?P<poll_id>\\d+)/vote/$', 'vote'),\n"
msgstr "    (r'^(?P<poll_id>\\d+)/vote/$', 'vote'),\n"

#. type: Plain text
#: orig/tutorial04.txt:78
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``::"
msgstr ""
"También creamos una implementación inocua de la función ``vote()``. Ahora "
"creemos una versión real.  Añada lo siguiente a ``polls/views.py``::"

#. type: Plain text
#: orig/tutorial04.txt:102
#, no-wrap
msgid ""
"    from django.shortcuts import get_object_or_404, render_to_response\n"
"    from django.http import HttpResponseRedirect, HttpResponse\n"
"    from django.core.urlresolvers import reverse\n"
"    from django.template import RequestContext\n"
"    from polls.models import Choice, Poll\n"
"    # ...\n"
"    def vote(request, poll_id):\n"
"        p = get_object_or_404(Poll, pk=poll_id)\n"
"        try:\n"
"            selected_choice = p.choice_set.get(pk=request.POST['choice'])\n"
"        except (KeyError, Choice.DoesNotExist):\n"
"            # Redisplay the poll voting form.\n"
"            return render_to_response('polls/detail.html', {\n"
"                'poll': p,\n"
"                'error_message': \"You didn't select a choice.\",\n"
"            }, context_instance=RequestContext(request))\n"
"        else:\n"
"            selected_choice.votes += 1\n"
"            selected_choice.save()\n"
"            # Always return an HttpResponseRedirect after successfully dealing\n"
"            # with POST data. This prevents data from being posted twice if a\n"
"            # user hits the Back button.\n"
"            return HttpResponseRedirect(reverse('polls.views.results', args=(p.id,)))\n"
msgstr ""
"    from django.shortcuts import get_object_or_404, render_to_response\n"
"    from django.http import HttpResponseRedirect, HttpResponse\n"
"    from django.core.urlresolvers import reverse\n"
"    from django.template import RequestContext\n"
"    from polls.models import Choice, Poll\n"
"    # ...\n"
"    def vote(request, poll_id):\n"
"        p = get_object_or_404(Poll, pk=poll_id)\n"
"        try:\n"
"            selected_choice = p.choice_set.get(pk=request.POST['choice'])\n"
"        except (KeyError, Choice.DoesNotExist):\n"
"            # mostrar de nuevo el formulario de votación.\n"
"            return render_to_response('polls/detail.html', {\n"
"                'poll': p,\n"
"                'error_message': \"No eligió una opción.\",\n"
"            }, context_instance=RequestContext(request))\n"
"        else:\n"
"            selected_choice.votes += 1\n"
"            selected_choice.save()\n"
"            # Siempre retorne un HttpResponseRedirect después de tratar un\n"
"            # POST de datos exitoso. Esto impide que se añada dos veces\n"
"            # Si se oprime el botón atrás del navegador.\n"
"            return HttpResponseRedirect(reverse('polls.views.results', "
"args=(p.id,)))\n"

#. type: Plain text
#: orig/tutorial04.txt:104
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""
"El código visto incluye algunas cosas que no hemos cubierto todavía en este "
"tutorial:"

#. type: Bullet: '* '
#: orig/tutorial04.txt:110
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` es un objeto parecido a "
"un diccionario que le permite acceder a sus datos por llaves. En este caso, "
"``request.POST['choice']`` retorna el ID de la opción elegida como una "
"cadena. Los valores de  :attr:`request.POST <django.http.HttpRequest.POST>` "
"siempres son cadenas."

#. type: Plain text
#: orig/tutorial04.txt:116
#, no-wrap
msgid ""
"  Note that Django also provides :attr:`request.GET\n"
"  <django.http.HttpRequest.GET>` for accessing GET data in the same way --\n"
"  but we're explicitly using :attr:`request.POST\n"
"  <django.http.HttpRequest.POST>` in our code, to ensure that data is only\n"
"  altered via a POST call.\n"
msgstr ""
"  Tenga en cuenta que Django también provee :attr:`request.GET\n"
"  <django.http.HttpRequest.GET>` para acceder a los datos GET de la misma "
"forma --\n"
"  pero estamos usando :attr:`request.POST\n"
"  <django.http.HttpRequest.POST>` en nuestro código explícitamente para "
"asegurarnos de obtener únicamente los datos POST."

#. type: Bullet: '* '
#: orig/tutorial04.txt:120
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the poll form with an error message if ``choice`` isn't given."
msgstr ""
"``request.POST['choice']`` generará una :exc:`KeyError` si ``choice`` no "
"hace parte de POST. El código anterior revisa :exc:`KeyError` y vuelve a "
"mostrar el formulario de encuesta con un mensaje de error si no se encontró "
"``choice``."

#. type: Bullet: '* '
#: orig/tutorial04.txt:127
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`.  :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""
"Después de incrementar el contador choice, el código retorna un "
":class:`~django.http.HttpResponseRedirect` en lugar del ya conocido :class:`"
"~django.http.HttpResponse`.:class:`~django.http.HttpResponseRedirect` toma "
"como único argumento: el URL al cual el usuario será redirigido ( Vea en el "
"punto siguiente la forma como construimos el URL para este caso)."

#. type: Plain text
#: orig/tutorial04.txt:132
#, no-wrap
msgid ""
"  As the Python comment above points out, you should always return an\n"
"  :class:`~django.http.HttpResponseRedirect` after successfully dealing with\n"
"  POST data. This tip isn't specific to Django; it's just good Web\n"
"  development practice.\n"
msgstr ""
"  Como el comentario de Python anterior sugirió, siempre debemos retornar un "
":class:`~django.http.HttpResponseRedirect` después de haber tratado "
"exitósamente con datos POST. Este consejo no es específico para Django; es "
"simplemente una buena práctica\n"
" de desarrollo web."

#. type: Bullet: '* '
#: orig/tutorial04.txt:141
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example.  This "
"function helps avoid having to hardcode a URL in the view function.  It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""
"En este ejemplo estamos usando la función "
":func:`~django.core.urlresolvers.reverse` con el constructor "
":class:`~django.http.HttpResponseRedirect`.  Esta función ayuda a evitar "
"\"quemar\" una URL en la función de la vista.  Lo que pasamos es el nombre de "
"la vista a la que deseamos darle el control y la porción variable del patrón "
"de la URL que apunta a tal vista. En este caso, al usar el URLconf que "
"establecimos en el Tutorial 3, la llamada a "
":func:`~django.core.urlresolvers.reverse` retornará una cadena como ::"

#. type: Plain text
#: orig/tutorial04.txt:143
#, no-wrap
msgid "    '/polls/3/results/'\n"
msgstr "    '/polls/3/results/'\n"

#. type: Plain text
#: orig/tutorial04.txt:147
#, no-wrap
msgid ""
"  ... where the ``3`` is the value of ``p.id``. This redirected URL will\n"
"  then call the ``'results'`` view to display the final page. Note that you\n"
"  need to use the full name of the view here (including the prefix).\n"
msgstr ""
"  ... donde el ``3`` es el valor de ``p.id``. Este URL redirigido llamará\n"
"  la vista ``'results'`` que mostrará la página finalmente. Tenga en cuenta\n"
"  que debe usar el nombre completo de la vista(incluyendo el prefijo).\n"

#. type: Plain text
#: orig/tutorial04.txt:151
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""
"Como se mencionó en el Tutorial 3, ``request`` es un objeto "
":class:`~django.http.HttpRequest`. Para daber más acerca del objeto "
":class:`~django.http.HttpRequest`, ver :doc:`request y la documentación de "
"response </ref/request-response>`."

#. type: Plain text
#: orig/tutorial04.txt:154
msgid ""
"After somebody votes in a poll, the ``vote()`` view redirects to the results "
"page for the poll. Let's write that view::"
msgstr ""
"Después de que alguien diligencia una encuesta, la vista ``vote()`` redirige "
"la página de resultados de la encuesta. Escribamos tal vista::"

#. type: Plain text
#: orig/tutorial04.txt:158
#, no-wrap
msgid ""
"    def results(request, poll_id):\n"
"        p = get_object_or_404(Poll, pk=poll_id)\n"
"        return render_to_response('polls/results.html', {'poll': p})\n"
msgstr ""
"    def results(request, poll_id):\n"
"        p = get_object_or_404(Poll, pk=poll_id)\n"
"        return render_to_response('polls/results.html', {'poll': p})\n"

#. type: Plain text
#: orig/tutorial04.txt:162
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""
"Esta es casi la misma vista ``detail()`` del :doc:`Tutorial 3 "
"</intro/tutorial03>`. La única diferencia es el nombre de la plantilla. "
"Arreglamos esta redundancia posteriormente."

#. type: Plain text
#: orig/tutorial04.txt:164
msgid "Now, create a ``results.html`` template:"
msgstr "Ahora creamos la plantilla ``results.html``:"

#. type: Plain text
#: orig/tutorial04.txt:174
#, no-wrap
msgid ""
"    <ul>\n"
"    {% for choice in poll.choice_set.all %}\n"
"        <li>{{ choice.choice }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>\n"
"    {% endfor %}\n"
"    </ul>\n"
msgstr ""
"    <ul>\n"
"    {% for choice in poll.choice_set.all %}\n"
"        <li>{{ choice.choice }} -- {{ choice.votes }} vote{{ "
"choice.votes|pluralize }}</li>\n"
"    {% endfor %}\n"
"    </ul>\n"

#. type: Plain text
#: orig/tutorial04.txt:176
#, no-wrap
msgid "    <a href=\"/polls/{{ poll.id }}/\">Vote again?</a>\n"
msgstr "    <a href=\"/polls/{{ poll.id }}/\">Votar de nuevo?</a>\n"

#. type: Plain text
#: orig/tutorial04.txt:180
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the poll. You should "
"see a results page that gets updated each time you vote. If you submit the "
"form without having chosen a choice, you should see the error message."
msgstr ""
"Ahora vaya a ``/polls/1/`` con su navegador y vote la encuesta. Debería ver "
"la página de resultados actualizada cada vez que vota. Si envía el "
"formulario sin elegir opción, verá el mensaje de error."

#. type: Plain text
#: orig/tutorial04.txt:182
#, no-wrap
msgid ""
"Use generic views: Less code is better\n"
"======================================\n"
msgstr ""
"Use vistas genéricas: Menos código es mejor\n"
"======================================\n"

#. type: Plain text
#: orig/tutorial04.txt:187
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and ``results()"
"`` views are stupidly simple -- and, as mentioned above, redundant. The "
"``index()`` view (also from Tutorial 3), which displays a list of polls, is "
"similar."
msgstr ""
"  El ``detail()`` (del :doc:`Tutorial 3 </intro/tutorial03>`) y la vista "
"``results()`` son increíblemente sencillos -- y, como se mencionó "
"anteiormente, redundantes. La vista ``index()`` (también del Tutorial 3), "
"que despliega la lista de encuestas, es similar."

#. type: Plain text
#: orig/tutorial04.txt:192
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""
"Estas vistas representan un caso común en desarrollo web básico: obtener "
"información de la base de datos de acuerdo a un parámetro pasado en la URL, "
"cargar la plantilla y retornar la visualización. Dado que es tan común, "
"Django provee un atajo, llamado el sistema de \"vistas genéricas\"."

#. type: Plain text
#: orig/tutorial04.txt:195
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""
"Las vistas genéricas abstraen patrones comunes a tal punto que no se "
"requiere escribir código Python para escribir una aplicación."

#. type: Plain text
#: orig/tutorial04.txt:199
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""
"Convirtamos nuestra aplicación de votaciones al sistema de vistas genéricas, "
"de forma tal que podamos borrar mucho de nuestro propio código. Solamente "
"tenemos que dar unos pasos para hacer esta conversión. Vamos a:"

#. type: Bullet: '1. '
#: orig/tutorial04.txt:201
msgid "Convert the URLconf."
msgstr "Convertir el URLconf."

#. type: Bullet: '2. '
#: orig/tutorial04.txt:203
msgid "Delete some of the old, unneeded views."
msgstr "Borrar algunas de las antiguas e innecesarias vistas."

#. type: Bullet: '3. '
#: orig/tutorial04.txt:205
msgid "Fix up URL handling for the new views."
msgstr "Arreglar los URL que se encargan de las nuevas vistas."

#. type: Plain text
#: orig/tutorial04.txt:207
msgid "Read on for details."
msgstr "Siga leyendo los detalles."

#. type: Plain text
#: orig/tutorial04.txt:209
msgid ".. admonition:: Why the code-shuffle?"
msgstr ".. advertencia:: Por qué la reescritura de código?"

#. type: Plain text
#: orig/tutorial04.txt:215
#, no-wrap
msgid ""
"    Generally, when writing a Django app, you'll evaluate whether generic views\n"
"    are a good fit for your problem, and you'll use them from the beginning,\n"
"    rather than refactoring your code halfway through. But this tutorial\n"
"    intentionally has focused on writing the views \"the hard way\" until now, to\n"
"    focus on core concepts.\n"
msgstr ""
"    Generalmente, cuando escriba una aplicación de Django, va a evaluar si "
"usar vistas genéricas\n"
"    es bueno para su problema, y las usará desde el principio,\n"
"    en lugar de refactorizar su código a mitad del camino. Pero este "
"tutorial\n"
"    se ha enfocado intencionalmente en escribir las vistas de la \"forma "
"difícil\" hasta ahora, para\n"
"    enfocarnos en los conceptos centrales.\n"

#. type: Plain text
#: orig/tutorial04.txt:217
#, no-wrap
msgid "    You should know basic math before you start using a calculator.\n"
msgstr "    Uno debería saber matemáticas básicas antes de comenzar a usar la "
"calculadora.\n"

#. type: Plain text
#: orig/tutorial04.txt:220
msgid ""
"First, open the ``polls/urls.py`` URLconf. It looks like this, according to "
"the tutorial so far::"
msgstr ""
"Primero, abra el URLconf ``polls/urls.py``. Luce de la siguiente forma, de "
"acuerdo al tutorial hasta ahora::"

#. type: Plain text
#: orig/tutorial04.txt:222
#, no-wrap
msgid "    from django.conf.urls import patterns, include, url\n"
msgstr "    from django.conf.urls import patterns, include, url\n"

#. type: Plain text
#: orig/tutorial04.txt:229
#, no-wrap
msgid ""
"    urlpatterns = patterns('polls.views',\n"
"        url(r'^$', 'index'),\n"
"        url(r'^(?P<poll_id>\\d+)/$', 'detail'),\n"
"        url(r'^(?P<poll_id>\\d+)/results/$', 'results'),\n"
"        url(r'^(?P<poll_id>\\d+)/vote/$', 'vote'),\n"
"    )\n"
msgstr ""
"    urlpatterns = patterns('polls.views',\n"
"        url(r'^$', 'index'),\n"
"        url(r'^(?P<poll_id>\\d+)/$', 'detail'),\n"
"        url(r'^(?P<poll_id>\\d+)/results/$', 'results'),\n"
"        url(r'^(?P<poll_id>\\d+)/vote/$', 'vote'),\n"
"    )\n"

#. type: Plain text
#: orig/tutorial04.txt:231
msgid "Change it like so::"
msgstr "Cámbielo para que luzca así::"

#. type: Plain text
#: orig/tutorial04.txt:235
#, no-wrap
msgid ""
"    from django.conf.urls import patterns, include, url\n"
"    from django.views.generic import DetailView, ListView\n"
"    from polls.models import Poll\n"
msgstr ""
"    from django.conf.urls import patterns, include, url\n"
"    from django.views.generic import DetailView, ListView\n"
"    from polls.models import Poll\n"

#. type: Plain text
#: orig/tutorial04.txt:253
#, no-wrap
msgid ""
"    urlpatterns = patterns('',\n"
"        url(r'^$',\n"
"            ListView.as_view(\n"
"                queryset=Poll.objects.order_by('-pub_date')[:5],\n"
"                context_object_name='latest_poll_list',\n"
"                template_name='polls/index.html')),\n"
"        url(r'^(?P<pk>\\d+)/$',\n"
"            DetailView.as_view(\n"
"                model=Poll,\n"
"                template_name='polls/detail.html')),\n"
"        url(r'^(?P<pk>\\d+)/results/$',\n"
"            DetailView.as_view(\n"
"                model=Poll,\n"
"                template_name='polls/results.html'),\n"
"            name='poll_results'),\n"
"        url(r'^(?P<poll_id>\\d+)/vote/$', 'polls.views.vote'),\n"
"    )\n"
msgstr ""
"    urlpatterns = patterns('',\n"
"        url(r'^$',\n"
"            ListView.as_view(\n"
"                queryset=Poll.objects.order_by('-pub_date')[:5],\n"
"                context_object_name='latest_poll_list',\n"
"                template_name='polls/index.html')),\n"
"        url(r'^(?P<pk>\\d+)/$',\n"
"            DetailView.as_view(\n"
"                model=Poll,\n"
"                template_name='polls/detail.html')),\n"
"        url(r'^(?P<pk>\\d+)/results/$',\n"
"            DetailView.as_view(\n"
"                model=Poll,\n"
"                template_name='polls/results.html'),\n"
"            name='poll_results'),\n"
"        url(r'^(?P<poll_id>\\d+)/vote/$', 'polls.views.vote'),\n"
"    )\n"

#. type: Plain text
#: orig/tutorial04.txt:259
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""
"Estamos usando dos vistas genéricas aquí: "
":class:`~django.views.generic.list.ListView` y "
":class:`~django.views.generic.detail.DetailView` ambas vistas abstraen los "
"conceptos de \"mostrar una lista de objetos\" y \"desplegar la página de "
"detalle para un tipo particular de objeto.\""

#. type: Bullet: '* '
#: orig/tutorial04.txt:262
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` parameter."
msgstr ""
"Cada vista genérica necesita saber sobre qué modelo estará actuando. Esto se "
"logra usando el parámetro ``modelo``"

#. type: Bullet: '* '
#: orig/tutorial04.txt:267
msgid ""
"The :class:`~django.views.generic.list.DetailView` generic view expects the "
"primary key value captured from the URL to be called ``\"pk\"``, so we've "
"changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""
"La vista genérica :class:`~django.views.generic.list.DetailView` espera el "
"valor de la llave primaria capturado en la URL que se llamará ``\"pk\"``, y "
"que hemos cambiado de ``poll_id`` a ``pk`` para la vista genérica."

#. type: Bullet: '* '
#: orig/tutorial04.txt:276
msgid ""
"We've added a name, ``poll_results``, to the results view so that we have a "
"way to refer to its URL later on (see the documentation about :ref:`naming "
"URL patterns <naming-url-patterns>` for information). We're also using the :"
"func:`~django.conf.urls.url` function from :mod:`django.conf.urls` here. "
"It's a good habit to use :func:`~django.conf.urls.url` when you are "
"providing a pattern name like this."
msgstr ""
"Adicionamos el nombre ``poll_results`` a la lista de resultados de forma que "
"tengamos una manera de referirnos a su URL posteriormente (ver la "
"documentación acerca de :ref:`nombramiento de patrones URL <naming-url-"
"patterns>`). También estamos usando la función :func:`~django.conf.urls.url` "
"de :mod:`django.conf.urls` aquí. Es un buen hábito usar "
":func:`~django.conf.urls.url` cuando provee un nombre de patrón como este."

#. type: Plain text
#: orig/tutorial04.txt:286
msgid ""
"By default, the :class:`~django.views.generic.list.DetailView` generic view "
"uses a template called ``<app name>/<model name>_detail.html``.  In our "
"case, it'll use the template ``\"polls/poll_detail.html\"``. The "
"``template_name`` argument is used to tell Django to use a specific template "
"name instead of the autogenerated default template name. We also specify the "
"``template_name`` for the ``results`` list view -- this ensures that the "
"results view and the detail view have a different appearance when rendered, "
"even though they're both a :class:`~django.views.generic.list.DetailView` "
"behind the scenes."
msgstr ""
"De forma predeterminada, la vista genérica "
":class:`~django.views.generic.list.DetailView` usa una plantilla llamada "
"``<app name>/<model name>_detail.html``. En nuestro caso, usaremosla "
"plantilla ``\"polls/poll_detail.html\"``. Empleamos el argumento "
"``template_name`` para decirle a Django que use una plantilla específica en "
"lugar del nombre de plantilla autogenerado. También especificamos el "
"``template_name`` para la vista ``results`` que actúa como listado -- esto "
"asegura que la vista de resultados y la vista de detalle tienen una "
"apariencia distinta cuando se visualizan, a pesar de ambas ser "
":class:`~django.views.generic.list.DetailView` tras bambalinas."

#. type: Plain text
#: orig/tutorial04.txt:292
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""
"De forma similar ls vista genérica "
":class:`~django.views.generic.list.ListView` usa una plantilla "
"predeterminada llamada ``<app name>/<model name>_list.html``; usamos "
"``template_name`` para decirle a "
":class:`~django.views.generic.list.ListView` que emplee nuestra plantilla "
"``\"polls/index.html\"``."

#. type: Plain text
#: orig/tutorial04.txt:304
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``poll`` and ``latest_poll_list`` context "
"variables. For DetailView the ``poll`` variable is provided automatically -- "
"since we're using a Django model (``Poll``), Django is able to determine an "
"appropriate name for the context variable.  However, for ListView, the "
"automatically generated context variable is ``poll_list``. To override this "
"we provide the ``context_object_name`` option, specifying that we want to "
"use ``latest_poll_list`` instead.  As an alternative approach, you could "
"change your templates to match the new default context variables -- but it's "
"a lot easier to just tell Django to use the variable you want."
msgstr ""
"En partes previas del tutorial, las plantillas se han usado con un contexto "
"que contiene las variables de contexto ``poll`` y ``latest_poll_list``. Para "
"DetailView la variable ``poll`` se provee automáticamente -- dado que "
"estamos usando un modelo de Django(``Poll``), Django es capaz de determinar "
"un nombre apropiado para la variable de contexto. Sin embargo, para "
"ListView, la variable de contexto generada automáticamente es ``poll_list``. "
"Para derogar esto se provee la opción `context_object_name``, que "
"especifica que queremos usar ``latest_poll_list`` en su lugar.  Como una "
"aproximación alternativa, puede cambiar sus plantillas para sincronizarse "
"con sus nuevas variables de contexto predeterminadas -- Pero es mucho más "
"sencillo decirle a Django que use la variable que usted quiere."

#. type: Plain text
#: orig/tutorial04.txt:308
msgid ""
"You can now delete the ``index()``, ``detail()`` and ``results()`` views "
"from ``polls/views.py``. We don't need them anymore -- they have been "
"replaced by generic views."
msgstr ""
"Puede borrar ahora las vistas ``index()``, ``detail()`` y ``results()`` de "
"``polls/views.py``. No las necesitamos más -- han sido reemplazadas por "
"vistas genéricas."

#. type: Plain text
#: orig/tutorial04.txt:317
msgid ""
"The last thing to do is fix the URL handling to account for the use of "
"generic views. In the vote view above, we used the :func:`~django.core."
"urlresolvers.reverse` function to avoid hard-coding our URLs. Now that we've "
"switched to a generic view, we'll need to change the :func:`~django.core."
"urlresolvers.reverse` call to point back to our new generic view. We can't "
"simply use the view function anymore -- generic views can be (and are) used "
"multiple times -- but we can use the name we've given::"
msgstr ""
"Lo último que resta por hacer es arreglar el manejo de URL para asegurar el "
"uso de las vistas genéricas. En la vista de votación previamente habíamos "
"usado la función :func:`~django.core.urlresolvers.reverse` para evitar "
"quemar nuestras URLs. Ahora que hemos cambiado a vistas genéricas, "
"necesitaremos cambiar la llamada a la función "
":func:`~django.core.urlresolvers.reverse` para referirse a la nueva vista "
"genérica. Ya no podemos simplemente usar la función vista -- las vistas "
"genéricas se pueden (y se usan) varias veces -- pero podemos usar el nombre "
"que habíamos elegido::"

#. type: Plain text
#: orig/tutorial04.txt:319
#, no-wrap
msgid "    return HttpResponseRedirect(reverse('poll_results', args=(p.id,)))\n"
msgstr "    return HttpResponseRedirect(reverse('poll_results', args=(p.id,)))\n"

#. type: Plain text
#: orig/tutorial04.txt:321
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""
"Ejecute el servidor, y use su nueva aplicación de votaciones basada en "
"vistas genéricas."

#. type: Plain text
#: orig/tutorial04.txt:324
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/http/generic-views>`."
msgstr ""
"Puede encontrar detalles completos acerca de vistas genéricas en la "
":doc:`documentación de vistas genéricas </topics/http/generic-views>`."

#. type: Plain text
#: orig/tutorial04.txt:326
#, no-wrap
msgid ""
"Coming soon\n"
"===========\n"
msgstr ""
"Pronto\n"
"======\n"
"\n"

#. type: Plain text
#: orig/tutorial04.txt:330
msgid ""
"The tutorial ends here for the time being. Future installments of the "
"tutorial will cover:"
msgstr "El tutorial finaliza aquí por ahora. En el futuro cubrirá:"

#. type: Bullet: '* '
#: orig/tutorial04.txt:337
msgid "Advanced form processing"
msgstr "Procesamiento avanzado de formularios"

#. type: Bullet: '* '
#: orig/tutorial04.txt:337
msgid "Using the RSS framework"
msgstr "Uso del framework RSS"

#. type: Bullet: '* '
#: orig/tutorial04.txt:337
msgid "Using the cache framework"
msgstr "Uso del framework de caché"

#. type: Bullet: '* '
#: orig/tutorial04.txt:337
msgid "Using the comments framework"
msgstr "Uso del framework de comentarios"

#. type: Bullet: '* '
#: orig/tutorial04.txt:337
msgid "Advanced admin features: Permissions"
msgstr "Características avanzadas de la interfaz de administración: Permisos"

#. type: Bullet: '* '
#: orig/tutorial04.txt:337
msgid "Advanced admin features: Custom JavaScript"
msgstr ""
"Características avanzadas de la interfaz de administración: Javascript a la "
"medida"

#. type: Plain text
#: orig/tutorial04.txt:339
msgid ""
"In the meantime, you might want to check out some pointers on :doc:`where to "
"go from here </intro/whatsnext>`"
msgstr ""
"Ahora podría darle una mirada a algunos enlaces en :doc:`dónde ir ahora "
"</intro/whatsnext>`"
