===================
Un vistazo a Django
===================

Dado que Django se desarrolló en un ambiente editorial con mucho movimiento,
fue diseñado para hacer que las tareas comunes del ambiente web fueran
rápidas y fáciles. A continuación mostramos un vistazo informal de cómo
escribir una aplicación web basada en bases de datos con Django.

El objetivo de este documento es ofrecerle las especificidades técnicas
necesarias para entender cómo funciona Django, no es un tutorial o una
referencia -- que de hecho tenemos ambas! Cuando esté listo para iniciar un
proyecto puede :doc:`comenzar con el tutorial </intro/tutorial01>` o
:doc:`sumergirse en documentación más detallada </topics/index>`.

Diseñe su modelo
================

Aunque puede usar Django sin una base de datos, viene con un mapeo
objeto-relacional en el cual puede describir la estructura de la base de
datos en código Python.

La :doc:`sintaxis del modelo de datos </topics/db/models>` ofrece variadas
formas enriquecidas para represenar sus modelos -- hasta ahora ha resuelto
dos años de problemas relacionados con esquema de base de datos. A
continuación un ejemplo rápido, que puede almacenarse en el fichero
``mysite/news/models.py``::

    class Reporter(models.Model):
        full_name = models.CharField(max_length=70)

        def __unicode__(self):
            return self.full_name

    class Article(models.Model):
        pub_date = models.DateTimeField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)

        def __unicode__(self):
            return self.headline

Instálelo
=========

A continuación, ejecute la utilidad desde la línea de comandos de Django
para crear las tablas en la base de datos de forma automática:

.. code-block:: bash

    manage.py syncdb

La orden :djadmin:`syncdb` revisa todos sus modelos disponibles y crea
aquellas tablas en su base de datos que todavía no existen.

Disfrute el API gratuito
========================

Con esto tiene un :doc:`Python API </topics/db/queries>` rico y de forma
gratuita para acceder a su información.  El API se crea instantáneamente, no
se requiere la generación de código::

    # Import the models we created from our "news" app
    >>> from news.models import Reporter, Article

    # Todavía no hay reporteros en el sistema.
    >>> Reporter.objects.all()
    []

    # Crear un nuevo Reportero.
    >>> r = Reporter(full_name='John Smith')

    # Se almacena el objeto en la base de datos. Tiene que invocar save() explícitamente.
    >>> r.save()

    # Ahora tiene un ID.
    >>> r.id
    1

    # Ahora el reportero está en la base de datos.
    >>> Reporter.objects.all()
    [<Reporter: John Smith>]

    # Los campos se representan como atributos del objeto Python.
    >>> r.full_name
    'John Smith'

    # Django ofrece un API de búsqueda rico.
    >>> Reporter.objects.get(id=1)
    <Reporter: John Smith>
    >>> Reporter.objects.get(full_name__startswith='John')
    <Reporter: John Smith>
    >>> Reporter.objects.get(full_name__contains='mith')
    <Reporter: John Smith>
    >>> Reporter.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Reporter matching query does not exist.

    # Crear un artículo.
    >>> from datetime import datetime
    >>> a = Article(pub_date=datetime.now(), headline='Django is cool',
    ...     content='Yeah.', reporter=r)
    >>> a.save()

    # Ahora el artículo está en la base de datos.
    >>> Article.objects.all()
    [<Article: Django is cool>]

    # Los objetos Article obtienen una API para acceder a los objetos Reporter relacionados.
    >>> r = a.reporter
    >>> r.full_name
    'John Smith'

    # Y vice versa: los objetos Reporter obtienen una API para acceder a los objetos Article.
    >>> r.article_set.all()
    [<Article: Django is cool>]

    # La API sigue las relaciones tan profundo como lo requiera, ejecutando
    # JOINs eficientes tras bambalinas.
    # A continuación se encuentran todos los artículos de un reportero cuyo nombre comienza con "John".
    >>> Article.objects.filter(reporter__full_name__startswith="John")
    [<Article: Django is cool>]

    # Se cambia un objeto modificando sus atributos e invocando el método save().
    >>> r.full_name = 'Billy Goat'
    >>> r.save()

    # Se elimina un objecto con delete().
    >>> r.delete()

Una interfaz de administración dinámica: No solamente el andamiaje -- es la casa entera
=======================================================================================

Cuando haya definido sus modelos, Django puede crear automáticamente una
interfaz administrativa profesional </ref/contrib/admin/index>`, lista para
producción : Un sitio web que le permite a usuarios autenticados, añadir,
cambiar y eliminar objetos.  Basta con registrar su modelo con el sitio
administrativo::

    # En models.py...

    from django.db import models

    class Article(models.Model):
        pub_date = models.DateTimeField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)


    # En admin.py en el mismo directorio...

    import models
    from django.contrib import admin

    admin.site.register(models.Article)

Aquí la filosofía es que su sitio lo edita los empleados, un cliente o usted
mismo, y no tiene que preocuparse por hacer interfaces de back-end para
administrar su contenido.

Un flujo de trabajo típico al crear aplicaciones Django es crear los modelos
y echar a andar el sitio administrativo tan rápido como sea posible, de
forma que el personal(o los clientes) puedan comenzar a diligenciar datos.
Posteriormente desarrollar la forma como los datos serán presentados al
público.

Diseñe sus URLs
===============

Un detalle importante en una aplicación web de gran calidad es un esquema de
URLs limpio y elegante.  Django anima el diseño de URLs hermosas y no añade
cosas como ``.php`` o ``.asp``.

Para diseñar URLs para una aplicación, se crea un módulo de Python llamado
:doc:`URLconf </topics/http/urls>`.  Es una tabla de contenidos para su
aplicación que contiene una relación sencilla entre patrones de URLs y
funciones de respuesta en Python. Las URLconfs también sirven para
desacoplar las URLs de su código Python.

A continuación mostramos cómo podría lucir un URLconf para el ejemplo
``Reportero``/``Artículo`` anterior

    from django.conf.urls import patterns, url, include

    urlpatterns = patterns('',
        (r'^articles/(\d{4})/$', 'news.views.year_archive'),
        (r'^articles/(\d{4})/(\d{2})/$', 'news.views.month_archive'),
        (r'^articles/(\d{4})/(\d{2})/(\d+)/$', 'news.views.article_detail'),
    )

El código anterior relaciona URLs, como expresiones regulares sencillas, al
lugar donde se encuentran las funciones Python de respuesta ("views").  Las
expresiones regulares usan paréntesis para "capturar" valores de las URLs.
Cuando un usuario solicita una página, Django evalúa cada patrón, en orden y
se detiene en el primero que concuerda con el URL solicitado. (Si ninguno
concuerda, Django invoca una vista especial 404.)  Es increíblemente rápido,
porque las expresiones regulares se precompilan al momento de carga.

Una vez que la expresión regular coincide, Django importa y llama la función
dada, que es una función sencilla en Python.  Cada vista recibe un objeto
request (Que contiene los metadatos de la solicitud) y los valores
capturados en la expresión regular.

Por ejemplo, si un usuario solicitó la URL "/articles/2005/05/39323/",
Django invocaría la función ``news.views.article_detail(request, '2005',
'05', '39323')``.

Escriba sus vistas
==================

Cada vista se encarga de hacer una o dos cosas: Retornar un objeto
:class:`~django.http.HttpResponse` que incluye el contenido de la página
solicitada, o disparar una excepción tal como
:class:`~django.http.Http404`.  El resto depende de usted.

Generalmente, una vista recupera datos a partir de los parámetros, carga una
plantilla y la muestra con la información recuperada. A continuación una
vista de ejemplo para ``year_archive`` del ejemplo anterior::

    def year_archive(request, year):
        a_list = Article.objects.filter(pub_date__year=year)
        return render_to_response('news/year_archive.html', {'year': year, 'article_list': a_list})

Este ejemplo usa el :doc:`sistema de plantillas </topics/templates>`, que
cuenta con características poderosas pero se mantiene lo suficientemente
sencillo para que los no programadores puedan usarlo.

Diseñe sus plantillas
=====================

El código anterior carga la plantilla ``news/year_archive.html``.

Django tiene una ruta de búsqueda de plantillas, que le permite minimizar
redundancia entre plantillas.  En su archivo de configuración de Django se
especifica una lista de directorios para buscar plantillas.  Si una
plantilla no se encuentra en el primero, se busca en el segundo y así
sucesivamente.

Supongamos que se encontró la plantilla ``news/year_archive.html``. Así es
como podría lucir:

.. code-block:: html+django

    {% extends "base.html" %}

    {% block title %}Artículos del {{ year }}{% endblock %}

    {% block content %}
    <h1>Artículos del {{ year }}</h1>

    {% for article in article_list %}
        <p>{{ article.headline }}</p>
        <p>Por {{ article.reporter.full_name }}</p>
        <p>Publicado {{ article.pub_date|date:"F j, Y" }}</p>
    {% endfor %}
    {% endblock %}

Las variables están rodeadas por corchetes dobles. ``{{ article.headline
}}`` significa "Muestre el valor del titular del objeto artículo".  Pero los
puntos no se usan únicamente para atributos: También pueden servir como
claves de diccionarios, índices y llamados a funciones.

Tenga en cuenta que ``{{ article.pub_date|date:"F j, Y" }}`` usa una
"interconexión" tipo Unix (el carácter "|").  Es a lo que llamamos un filtro
de plantilla, y es una forma para filtrar valores de una variable.  En este
caso, el filtro fecha da formato a un objeto de dato Python hora fecha en un
formato dado(como se especifica en la función fecha de PHP; si, hay una
buena idea en PHP).

Puede enlazar tantos filtros como desee.  Puede crear sus propios
filtros. Puede crear etiquetas de plantilla propias, que ejecutan código
Python propio tras bambalinas.

Finalmente, Django usa el concepto de "herencia de plantillas": Eso es lo
que ``{% extends "base.html" %}`` hace.  Significa "Primero llame la
plantilla llamada 'base', que tiene definidos varios bloques, y llene los
bloques con estos bloques."  En pocas palabras, le permite eliminar
dramáticamente redundancia en plantillas: cada plantilla tiene que definir
únicamente lo particular de la plantilla.

A continuación un ejemplo de cómo podría lucir la plantilla "base.html":

.. code-block:: html+django

    <html>
    <head>
        <title>{% block title %}{% endblock %}</title>
    </head>
    <body>
        <img src="sitelogo.gif" alt="Logo" />
        {% block content %}{% endblock %}
    </body>
    </html>

Sencillamente define el visual del sitio (con el logotipo del sitio), y
provee "huecos" para que las plantillas hijas los llenen.  Esto hace que
rediseñar un sitio resulte tan sencillo como cambiar un único fichero : la
plantilla base.

También le permite crear múltiples versiones de un sitio, con diferentes
plantillas base, reusando las hijas.  Los creadores de Django han usado esta
técnica para crear versiones para teléfonos celulares impresionantemente
distintas, únicamente creando una nueva plantilla base.

Tenga en cuenta que no tiene que usar el sistema de plantillas de Django si
prefiere otro sistema.  Aunque el sistema de plantillas de Django se
encuentra sumamente bien integrado con la capa de modelos de Django, no
estamos forzándolo a usarlo.  Así mismo, tampoco tiene que emplear el API de
bases de datos de Django.  Puede usar otra capa de abstracción de bases de
datos, puede leer archivos XML, puede leer del disco o de donde desee.  Cada
pieza de Django : modelos, vistas, plantillas está desacoplada de la
siguiente.

Esto es sólo el comienzo
========================

Este fue solamente un vistazo rápido de las funcionalidades de Django. A
continuación otras características útiles:

* Un :doc:`framework para hacer caché </topics/cache>` que se integra con
  memcached y otros backends.

* Un :doc:`framework de sindicación </ref/contrib/syndication>` que permite
  crear feeds RSS y Atom con tan solo escribir una clase de Python.

* Más características sexies generadas automáticamente, este vistazo
  solamente arañó la superficie.

Los siguientes pasos obvios son `descargar Django`_, leer :doc:`el tutorial
</intro/tutorial01>` y unirse a `la comunidad`_. Gracias por su interés!

.. _descargar Django: https://www.djangoproject.com/download/ .. _la
comunidad: https://www.djangoproject.com/community/
